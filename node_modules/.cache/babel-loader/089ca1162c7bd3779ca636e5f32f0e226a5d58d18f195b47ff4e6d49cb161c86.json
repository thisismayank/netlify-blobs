{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import {\n//   Box,\n//   Typography,\n//   Button,\n//   TextField,\n//   MenuItem,\n//   Select,\n//   InputLabel,\n//   FormControl,\n//   Paper,\n// } from \"@mui/material\";\n// import { styled } from \"@mui/material/styles\";\n\n// // Neumorphic styled Paper component\n// const NeumorphicPaper = styled(Paper)(({ theme }) => ({\n//   padding: theme.spacing(2),\n//   borderRadius: theme.spacing(2),\n//   boxShadow: \"20px 20px 60px #bebebe, -20px -20px 60px #ffffff\",\n// }));\n// function ImageCarousel() {\n//   const images = [\n//     { url: \"/modric.jpeg\", alt: \"Modric\" },\n//     { url: \"/madrid.jpeg\", alt: \"Madrid\" },\n//     { url: \"/ozil.jpeg\", alt: \"Ozil\" },\n//     { url: \"/ronaldo-1.jpeg\", alt: \"Ronaldo\" },\n//     { url: \"/benzema.jpeg\", alt: \"Benzema\" },\n//     { url: \"/messi.jpeg\", alt: \"Messi\" },\n//   ];\n\n//   const [selectedImageIndex, setSelectedImageIndex] = useState(0);\n//   const [imageWidth, setImageWidth] = useState(500);\n//   const [imageHeight, setImageHeight] = useState(500);\n//   const [fit, setFit] = useState(\"contain\");\n//   const [format, setFormat] = useState(\"jpg\");\n//   const [quality, setQuality] = useState(50);\n//   const [error, setError] = useState(false);\n//   const [helperText, setHelperText] = useState(\n//     \"Value must be between 1 and 100\"\n//   );\n//   const [fileSize, setFileSize] = useState(0);\n//   const [prevFileSize, setPrevFileSize] = useState(0);\n//   const handleChange = (event) => {\n//     const value = event.target.value;\n//     setQuality(value);\n\n//     if (value < 1 || value > 100) {\n//       setError(true);\n//       setHelperText(\n//         `Please enter a value between 1 and 100.\n//         Resetting to closest value for the url.`\n//       );\n//       if (value > 100) {\n//         setQuality(100);\n//       }\n//     } else {\n//       setError(false);\n//       setHelperText(\"Value must be between 1 and 100\");\n//     }\n//   };\n//   const baseUrl = \"https://mayank-cdn-test.netlify.app/.netlify/images\";\n\n//   const buildImageUrl = () => {\n//     const { url } = images[selectedImageIndex];\n//     return `${baseUrl}?url=${encodeURIComponent(\n//       url\n//     )}&w=${imageWidth}&h=${imageHeight}&fit=${fit}&fm=${format}&q=${quality}`;\n//   };\n\n//   const fetchImageSize = async () => {\n//     setPrevFileSize(fileSize);\n//     const response = await fetch(buildImageUrl());\n//     const blob = await response.blob();\n//     setFileSize(blob.size / 1024); // Convert bytes to KB\n//   };\n\n//   const handleFitChange = (event) => {\n//     setFit(event.target.value);\n//   };\n//   useEffect(() => {\n//     fetchImageSize();\n//   }, [imageWidth, imageHeight, fit, format, quality]);\n//   return (\n//     <Box sx={{ p: 4 }}>\n//       <Typography\n//         variant=\"h4\"\n//         component=\"h1\"\n//         sx={{ fontWeight: \"bold\", textAlign: \"center\", mb: 1 }}\n//       >\n//         Netlify Challenge\n//       </Typography>\n//       <Paper\n//         sx={{ mb: 2, p: 2, textAlign: \"center\", backgroundColor: \"#b0c7c7\" }}\n//       >\n//         <Typography\n//           variant=\"caption\"\n//           sx={{\n//             wordWrap: \"break-word\",\n//             fontWeight: \"bold\",\n//             fontSize: \"1em\",\n//             color: \"crimson\",\n//           }}\n//         >\n//           {buildImageUrl()}\n//         </Typography>\n//       </Paper>\n//       <Box sx={{ display: \"flex\", gap: 3 }}>\n//         <Box sx={{ width: \"25%\", overflowY: \"auto\", maxHeight: \"85vh\" }}>\n//           {images.map((img, index) => (\n//             <Button\n//               key={index}\n//               onClick={() => setSelectedImageIndex(index)}\n//               sx={{\n//                 width: 100,\n//                 height: 100,\n//                 p: 0,\n//                 m: 1,\n\n//                 transition: \"transform 0.3s, border 0.3s\",\n//                 \"& img\": {\n//                   borderRadius: \"10px\",\n//                   width: 100,\n//                   height: 100,\n//                   border:\n//                     selectedImageIndex === index ? \"4px solid green\" : \"0px\",\n//                   transform:\n//                     selectedImageIndex === index ? \"scale(1.1)\" : \"none\",\n//                   transition: \"transform 0.3s, border 0.3s\",\n//                 },\n//               }}\n//             >\n//               <img src={img.url} alt={img.alt} />\n//             </Button>\n//           ))}\n//         </Box>\n\n//         <NeumorphicPaper\n//           sx={{\n//             width: \"50%\",\n//             display: \"flex\",\n//             flexDirection: \"column\",\n//             alignItems: \"center\",\n//             justifyContent: \"center\",\n//             backgroundColor: \"#e2e3e3\",\n//           }}\n//         >\n//           <img src={buildImageUrl()} alt={images[selectedImageIndex].alt} />\n//           <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 2 }}>\n//             {fit}:{\" \"}\n//             {fit === \"contain\"\n//               ? \"Resizes the image to fit within the given dimension while preserving its aspect ratio.\"\n//               : fit === \"cover\"\n//               ? \"Resizes the image to fill the given dimension while preserving its aspect ratio, but may crop the image.\"\n//               : \"Stretches the image to fit the content box, regardless of its aspect ratio.\"}\n//           </Typography>\n//         </NeumorphicPaper>\n//         <Box sx={{ width: \"25%\" }}>\n//           <TextField\n//             label=\"Width\"\n//             type=\"number\"\n//             value={imageWidth}\n//             onChange={(e) => setImageWidth(e.target.value)}\n//             variant=\"outlined\"\n//             size=\"small\"\n//             fullWidth\n//             sx={{ mb: 2 }}\n//           />\n//           <TextField\n//             label=\"Height\"\n//             type=\"number\"\n//             value={imageHeight}\n//             onChange={(e) => setImageHeight(e.target.value)}\n//             variant=\"outlined\"\n//             size=\"small\"\n//             fullWidth\n//             sx={{ mb: 2 }}\n//           />\n//           <TextField\n//             label=\"Quality\"\n//             type=\"number\"\n//             value={quality}\n//             onChange={handleChange}\n//             helperText={helperText}\n//             error={error} // Conditionally render error state\n//             variant=\"outlined\"\n//             size=\"small\"\n//             fullWidth\n//             sx={{ mb: 2 }}\n//           />\n//           <FormControl fullWidth sx={{ mb: 2 }}>\n//             <InputLabel>Fit</InputLabel>\n//             <Select value={fit} label=\"Fit\" onChange={handleFitChange}>\n//               <MenuItem value=\"contain\">Contain</MenuItem>\n//               <MenuItem value=\"cover\">Cover</MenuItem>\n//               <MenuItem value=\"fill\">Fill</MenuItem>\n//             </Select>\n//           </FormControl>\n//           <FormControl fullWidth>\n//             <InputLabel>Format</InputLabel>\n//             <Select\n//               value={format}\n//               label=\"Format\"\n//               onChange={(e) => setFormat(e.target.value)}\n//             >\n//               <MenuItem value=\"webp\">WebP</MenuItem>\n//               <MenuItem value=\"jpg\">JPG</MenuItem>\n//               <MenuItem value=\"png\">PNG</MenuItem>\n//               <MenuItem value=\"avif\">AVIF</MenuItem>\n//             </Select>\n//           </FormControl>\n//           <Box sx={{ mt: 3 }}>\n//             <Typography\n//               variant=\"body2\"\n//               color=\"red\"\n//               style={{\n//                 fontWeight: \"bold\",\n//                 backgroundColor: \"yellow\",\n//                 fontSize: \"1.5em\",\n\n//                 borderRadius: 8,\n//               }}\n//             >\n//               Size now: {fileSize.toFixed(2)} KB\n//             </Typography>\n//             <br />\n//             <Typography\n//               variant=\"body2\"\n//               color=\"#004dff\"\n//               style={{\n//                 fontWeight: \"bold\",\n//                 backgroundColor: \"#e4e4e4\",\n//                 padding: 8,\n//                 borderRadius: 8,\n//               }}\n//             >\n//               Prev size @ [{imageWidth}W x {imageHeight}H x {quality}Q x {fit} x{\" \"}\n//               {format.toUpperCase()}] : {prevFileSize.toFixed(2)} KB\n//             </Typography>\n//           </Box>\n//         </Box>\n//       </Box>\n//     </Box>\n//   );\n// }\n\n// export default ImageCarousel;","map":{"version":3,"names":[],"sources":["/Users/mayanka/Workspace/netlify-image-cdn/src/Components/imagecarousel.component.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import {\n//   Box,\n//   Typography,\n//   Button,\n//   TextField,\n//   MenuItem,\n//   Select,\n//   InputLabel,\n//   FormControl,\n//   Paper,\n// } from \"@mui/material\";\n// import { styled } from \"@mui/material/styles\";\n\n// // Neumorphic styled Paper component\n// const NeumorphicPaper = styled(Paper)(({ theme }) => ({\n//   padding: theme.spacing(2),\n//   borderRadius: theme.spacing(2),\n//   boxShadow: \"20px 20px 60px #bebebe, -20px -20px 60px #ffffff\",\n// }));\n// function ImageCarousel() {\n//   const images = [\n//     { url: \"/modric.jpeg\", alt: \"Modric\" },\n//     { url: \"/madrid.jpeg\", alt: \"Madrid\" },\n//     { url: \"/ozil.jpeg\", alt: \"Ozil\" },\n//     { url: \"/ronaldo-1.jpeg\", alt: \"Ronaldo\" },\n//     { url: \"/benzema.jpeg\", alt: \"Benzema\" },\n//     { url: \"/messi.jpeg\", alt: \"Messi\" },\n//   ];\n\n//   const [selectedImageIndex, setSelectedImageIndex] = useState(0);\n//   const [imageWidth, setImageWidth] = useState(500);\n//   const [imageHeight, setImageHeight] = useState(500);\n//   const [fit, setFit] = useState(\"contain\");\n//   const [format, setFormat] = useState(\"jpg\");\n//   const [quality, setQuality] = useState(50);\n//   const [error, setError] = useState(false);\n//   const [helperText, setHelperText] = useState(\n//     \"Value must be between 1 and 100\"\n//   );\n//   const [fileSize, setFileSize] = useState(0);\n//   const [prevFileSize, setPrevFileSize] = useState(0);\n//   const handleChange = (event) => {\n//     const value = event.target.value;\n//     setQuality(value);\n\n//     if (value < 1 || value > 100) {\n//       setError(true);\n//       setHelperText(\n//         `Please enter a value between 1 and 100.\n//         Resetting to closest value for the url.`\n//       );\n//       if (value > 100) {\n//         setQuality(100);\n//       }\n//     } else {\n//       setError(false);\n//       setHelperText(\"Value must be between 1 and 100\");\n//     }\n//   };\n//   const baseUrl = \"https://mayank-cdn-test.netlify.app/.netlify/images\";\n\n//   const buildImageUrl = () => {\n//     const { url } = images[selectedImageIndex];\n//     return `${baseUrl}?url=${encodeURIComponent(\n//       url\n//     )}&w=${imageWidth}&h=${imageHeight}&fit=${fit}&fm=${format}&q=${quality}`;\n//   };\n\n//   const fetchImageSize = async () => {\n//     setPrevFileSize(fileSize);\n//     const response = await fetch(buildImageUrl());\n//     const blob = await response.blob();\n//     setFileSize(blob.size / 1024); // Convert bytes to KB\n//   };\n\n//   const handleFitChange = (event) => {\n//     setFit(event.target.value);\n//   };\n//   useEffect(() => {\n//     fetchImageSize();\n//   }, [imageWidth, imageHeight, fit, format, quality]);\n//   return (\n//     <Box sx={{ p: 4 }}>\n//       <Typography\n//         variant=\"h4\"\n//         component=\"h1\"\n//         sx={{ fontWeight: \"bold\", textAlign: \"center\", mb: 1 }}\n//       >\n//         Netlify Challenge\n//       </Typography>\n//       <Paper\n//         sx={{ mb: 2, p: 2, textAlign: \"center\", backgroundColor: \"#b0c7c7\" }}\n//       >\n//         <Typography\n//           variant=\"caption\"\n//           sx={{\n//             wordWrap: \"break-word\",\n//             fontWeight: \"bold\",\n//             fontSize: \"1em\",\n//             color: \"crimson\",\n//           }}\n//         >\n//           {buildImageUrl()}\n//         </Typography>\n//       </Paper>\n//       <Box sx={{ display: \"flex\", gap: 3 }}>\n//         <Box sx={{ width: \"25%\", overflowY: \"auto\", maxHeight: \"85vh\" }}>\n//           {images.map((img, index) => (\n//             <Button\n//               key={index}\n//               onClick={() => setSelectedImageIndex(index)}\n//               sx={{\n//                 width: 100,\n//                 height: 100,\n//                 p: 0,\n//                 m: 1,\n\n//                 transition: \"transform 0.3s, border 0.3s\",\n//                 \"& img\": {\n//                   borderRadius: \"10px\",\n//                   width: 100,\n//                   height: 100,\n//                   border:\n//                     selectedImageIndex === index ? \"4px solid green\" : \"0px\",\n//                   transform:\n//                     selectedImageIndex === index ? \"scale(1.1)\" : \"none\",\n//                   transition: \"transform 0.3s, border 0.3s\",\n//                 },\n//               }}\n//             >\n//               <img src={img.url} alt={img.alt} />\n//             </Button>\n//           ))}\n//         </Box>\n\n//         <NeumorphicPaper\n//           sx={{\n//             width: \"50%\",\n//             display: \"flex\",\n//             flexDirection: \"column\",\n//             alignItems: \"center\",\n//             justifyContent: \"center\",\n//             backgroundColor: \"#e2e3e3\",\n//           }}\n//         >\n//           <img src={buildImageUrl()} alt={images[selectedImageIndex].alt} />\n//           <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 2 }}>\n//             {fit}:{\" \"}\n//             {fit === \"contain\"\n//               ? \"Resizes the image to fit within the given dimension while preserving its aspect ratio.\"\n//               : fit === \"cover\"\n//               ? \"Resizes the image to fill the given dimension while preserving its aspect ratio, but may crop the image.\"\n//               : \"Stretches the image to fit the content box, regardless of its aspect ratio.\"}\n//           </Typography>\n//         </NeumorphicPaper>\n//         <Box sx={{ width: \"25%\" }}>\n//           <TextField\n//             label=\"Width\"\n//             type=\"number\"\n//             value={imageWidth}\n//             onChange={(e) => setImageWidth(e.target.value)}\n//             variant=\"outlined\"\n//             size=\"small\"\n//             fullWidth\n//             sx={{ mb: 2 }}\n//           />\n//           <TextField\n//             label=\"Height\"\n//             type=\"number\"\n//             value={imageHeight}\n//             onChange={(e) => setImageHeight(e.target.value)}\n//             variant=\"outlined\"\n//             size=\"small\"\n//             fullWidth\n//             sx={{ mb: 2 }}\n//           />\n//           <TextField\n//             label=\"Quality\"\n//             type=\"number\"\n//             value={quality}\n//             onChange={handleChange}\n//             helperText={helperText}\n//             error={error} // Conditionally render error state\n//             variant=\"outlined\"\n//             size=\"small\"\n//             fullWidth\n//             sx={{ mb: 2 }}\n//           />\n//           <FormControl fullWidth sx={{ mb: 2 }}>\n//             <InputLabel>Fit</InputLabel>\n//             <Select value={fit} label=\"Fit\" onChange={handleFitChange}>\n//               <MenuItem value=\"contain\">Contain</MenuItem>\n//               <MenuItem value=\"cover\">Cover</MenuItem>\n//               <MenuItem value=\"fill\">Fill</MenuItem>\n//             </Select>\n//           </FormControl>\n//           <FormControl fullWidth>\n//             <InputLabel>Format</InputLabel>\n//             <Select\n//               value={format}\n//               label=\"Format\"\n//               onChange={(e) => setFormat(e.target.value)}\n//             >\n//               <MenuItem value=\"webp\">WebP</MenuItem>\n//               <MenuItem value=\"jpg\">JPG</MenuItem>\n//               <MenuItem value=\"png\">PNG</MenuItem>\n//               <MenuItem value=\"avif\">AVIF</MenuItem>\n//             </Select>\n//           </FormControl>\n//           <Box sx={{ mt: 3 }}>\n//             <Typography\n//               variant=\"body2\"\n//               color=\"red\"\n//               style={{\n//                 fontWeight: \"bold\",\n//                 backgroundColor: \"yellow\",\n//                 fontSize: \"1.5em\",\n\n//                 borderRadius: 8,\n//               }}\n//             >\n//               Size now: {fileSize.toFixed(2)} KB\n//             </Typography>\n//             <br />\n//             <Typography\n//               variant=\"body2\"\n//               color=\"#004dff\"\n//               style={{\n//                 fontWeight: \"bold\",\n//                 backgroundColor: \"#e4e4e4\",\n//                 padding: 8,\n//                 borderRadius: 8,\n//               }}\n//             >\n//               Prev size @ [{imageWidth}W x {imageHeight}H x {quality}Q x {fit} x{\" \"}\n//               {format.toUpperCase()}] : {prevFileSize.toFixed(2)} KB\n//             </Typography>\n//           </Box>\n//         </Box>\n//       </Box>\n//     </Box>\n//   );\n// }\n\n// export default ImageCarousel;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}