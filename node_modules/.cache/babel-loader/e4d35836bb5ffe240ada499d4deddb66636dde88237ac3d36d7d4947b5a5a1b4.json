{"ast":null,"code":"var _jsxFileName = \"/Users/mayanka/Workspace/netlify-image-cdn/src/Components/imagemanager.component.js\",\n  _s = $RefreshSig$();\n// src/components/ImageManager.js\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImageManager() {\n  _s();\n  const [file, setFile] = useState(null);\n  const [images, setImages] = useState([]);\n  const [stores, setStores] = useState([]);\n  const [selectedStore, setSelectedStore] = useState(\"\");\n  useEffect(() => {\n    fetchStores();\n  }, []);\n  const fetchStores = async () => {\n    try {\n      const response = await fetch(\"/.netlify/functions/listStores\");\n      if (response.ok) {\n        const data = await response.json();\n        setStores(data);\n        if (data.length > 0) {\n          setSelectedStore(data[0]); // Set the first store as default selected\n        }\n      } else {\n        console.error(\"Failed to fetch stores\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching stores:\", error);\n    }\n  };\n  const fetchImagesWithKey = async key => {\n    console.log(\"fetch image key\", key);\n    const response = await fetch(`/.netlify/functions/getImage?key=${encodeURIComponent(key)}`);\n    if (response.ok) {\n      console.log(\"HERE\");\n      const data = await response.json();\n      console.log(\"data\", data);\n      setImages(data.images || []);\n    }\n  };\n  const fetchImages = async () => {\n    if (!selectedStore) return;\n    try {\n      const response = await fetch(`/.netlify/functions/listBlobs?store=${encodeURIComponent(selectedStore)}`);\n      if (response.ok) {\n        const data = await response.json();\n        setImages(data);\n      } else {\n        console.error(\"Failed to fetch images\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching images:\", error);\n    }\n  };\n  console.log(\"Images\", images);\n  const handleUpload = async () => {\n    if (!file || !selectedStore) {\n      alert(\"Please select a file and a store first!\");\n      return;\n    }\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    formData.append(\"store\", selectedStore);\n    try {\n      const response = await fetch(\"/.netlify/functions/uploadImage\", {\n        method: \"POST\",\n        body: formData\n      });\n      if (response.ok) {\n        const data = await response.json();\n        alert(\"Upload Successful!\");\n        fetchImages(); // Refresh images after upload\n      } else {\n        const error = await response.json();\n        alert(`Upload failed: ${error.message}`);\n      }\n    } catch (error) {\n      alert(\"Upload failed:\", error.message);\n    }\n  };\n  const deleteImage = async key => {\n    if (!selectedStore) return;\n    try {\n      const response = await fetch(`/.netlify/functions/deleteBlob?key=${encodeURIComponent(key)}&store=${encodeURIComponent(selectedStore)}`, {\n        method: \"DELETE\"\n      });\n      if (response.ok) {\n        alert(\"Image deleted successfully\");\n        fetchImages(); // Refresh images after deletion\n      } else {\n        alert(\"Failed to delete image\");\n      }\n    } catch (error) {\n      alert(\"Error deleting image:\", error);\n    }\n  };\n  const handleStoreChange = store => {\n    setSelectedStore(store);\n    fetchImages();\n  };\n  const handleFileChange = event => {\n    setFile(event.target.files[0]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Upload and Manage Images\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: e => handleStoreChange(e.target.value),\n      value: selectedStore,\n      children: stores.map((store, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: store,\n        children: store\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange,\n      accept: \"image/*\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      children: \"Upload Image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Uploaded Images in \", selectedStore]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), images.length > 0 ? images.map((image, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: `data:image/jpeg;base64,${image.data}`,\n          alt: image.metadata.filename,\n          style: {\n            width: \"100px\",\n            height: \"auto\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Filename: \", image.metadata.filename]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"MIME type: \", image.metadata.mimetype]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => deleteImage(image.key),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No images to display.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n}\n_s(ImageManager, \"KTZ7fXM4aJ6cJ0sA9vVocE48BTk=\");\n_c = ImageManager;\nexport default ImageManager;\nvar _c;\n$RefreshReg$(_c, \"ImageManager\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ImageManager","_s","file","setFile","images","setImages","stores","setStores","selectedStore","setSelectedStore","useEffect","fetchStores","response","fetch","ok","data","json","length","console","error","fetchImagesWithKey","key","log","encodeURIComponent","fetchImages","handleUpload","alert","formData","FormData","append","method","body","message","deleteImage","handleStoreChange","store","handleFileChange","event","target","files","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","value","map","index","type","accept","onClick","image","src","alt","metadata","filename","style","width","height","mimetype","_c","$RefreshReg$"],"sources":["/Users/mayanka/Workspace/netlify-image-cdn/src/Components/imagemanager.component.js"],"sourcesContent":["// src/components/ImageManager.js\nimport React, { useState } from \"react\";\n\nfunction ImageManager() {\n  const [file, setFile] = useState(null);\n  const [images, setImages] = useState([]);\n  const [stores, setStores] = useState([]);\n  const [selectedStore, setSelectedStore] = useState(\"\");\n  useEffect(() => {\n    fetchStores();\n  }, []);\n\n  const fetchStores = async () => {\n    try {\n      const response = await fetch(\"/.netlify/functions/listStores\");\n      if (response.ok) {\n        const data = await response.json();\n        setStores(data);\n        if (data.length > 0) {\n          setSelectedStore(data[0]); // Set the first store as default selected\n        }\n      } else {\n        console.error(\"Failed to fetch stores\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching stores:\", error);\n    }\n  };\n\n  const fetchImagesWithKey = async (key) => {\n    console.log(\"fetch image key\", key);\n    const response = await fetch(\n      `/.netlify/functions/getImage?key=${encodeURIComponent(key)}`\n    );\n\n    if (response.ok) {\n      console.log(\"HERE\");\n      const data = await response.json();\n      console.log(\"data\", data);\n      setImages(data.images || []);\n    }\n  };\n\n  const fetchImages = async () => {\n    if (!selectedStore) return;\n    try {\n      const response = await fetch(\n        `/.netlify/functions/listBlobs?store=${encodeURIComponent(\n          selectedStore\n        )}`\n      );\n      if (response.ok) {\n        const data = await response.json();\n        setImages(data);\n      } else {\n        console.error(\"Failed to fetch images\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching images:\", error);\n    }\n  };\n  console.log(\"Images\", images);\n  const handleUpload = async () => {\n    if (!file || !selectedStore) {\n      alert(\"Please select a file and a store first!\");\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    formData.append(\"store\", selectedStore);\n\n    try {\n      const response = await fetch(\"/.netlify/functions/uploadImage\", {\n        method: \"POST\",\n        body: formData,\n      });\n      if (response.ok) {\n        const data = await response.json();\n        alert(\"Upload Successful!\");\n        fetchImages(); // Refresh images after upload\n      } else {\n        const error = await response.json();\n        alert(`Upload failed: ${error.message}`);\n      }\n    } catch (error) {\n      alert(\"Upload failed:\", error.message);\n    }\n  };\n\n  const deleteImage = async (key) => {\n    if (!selectedStore) return;\n    try {\n      const response = await fetch(\n        `/.netlify/functions/deleteBlob?key=${encodeURIComponent(\n          key\n        )}&store=${encodeURIComponent(selectedStore)}`,\n        { method: \"DELETE\" }\n      );\n      if (response.ok) {\n        alert(\"Image deleted successfully\");\n        fetchImages(); // Refresh images after deletion\n      } else {\n        alert(\"Failed to delete image\");\n      }\n    } catch (error) {\n      alert(\"Error deleting image:\", error);\n    }\n  };\n\n  const handleStoreChange = (store) => {\n    setSelectedStore(store);\n    fetchImages();\n  };\n\n  const handleFileChange = (event) => {\n    setFile(event.target.files[0]);\n  };\n\n  return (\n    <div>\n      <h2>Upload and Manage Images</h2>\n      <select\n        onChange={(e) => handleStoreChange(e.target.value)}\n        value={selectedStore}\n      >\n        {stores.map((store, index) => (\n          <option key={index} value={store}>\n            {store}\n          </option>\n        ))}\n      </select>\n      <input type=\"file\" onChange={handleFileChange} accept=\"image/*\" />\n      <button onClick={handleUpload}>Upload Image</button>\n      <div>\n        <h3>Uploaded Images in {selectedStore}</h3>\n        {images.length > 0 ? (\n          images.map((image, index) => (\n            <div key={index}>\n              <img\n                src={`data:image/jpeg;base64,${image.data}`}\n                alt={image.metadata.filename}\n                style={{ width: \"100px\", height: \"auto\" }}\n              />\n              <p>Filename: {image.metadata.filename}</p>\n              <p>MIME type: {image.metadata.mimetype}</p>\n              <button onClick={() => deleteImage(image.key)}>Delete</button>\n            </div>\n          ))\n        ) : (\n          <p>No images to display.</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default ImageManager;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}